{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,EAAM,aAAa,CAAC,SAC5B,EAAO,SAAS,aAAa,CAAC,sBAChC,EAAc,CAAA,EAEZ,EAAY,SAAC,CAAA,CAAO,CAA1B,EACE,IAAM,EAAO,MAAM,IAAI,CAAC,EAAM,IAAI,EAElC,EAAK,IAAI,CAAC,SAAC,CAAA,CAAG,CAAd,EACE,IAAM,EAAQ,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,CAChC,EAAQ,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,QAEtC,AAAI,EAAQ,EACH,EAAM,GAAK,EAGhB,EAAQ,EACH,EAAM,EAAI,GAGZ,CACT,GAEA,AAAA,EAAM,MAAM,CAAZ,KAAA,CAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAgB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IAClB,EAEA,EAAM,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAC,CAAA,CAAQ,CAA9C,EACE,EAAO,gBAAgB,CAAC,QAAS,WAC/B,EAAU,EAAO,GACjB,EAAc,CAAC,CACjB,EACF,GAEA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EAC2B,OAArB,EAAE,MAAM,CAAC,OAAO,GAClB,MAAM,IAAI,CAAC,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAhC,EAAwC,OAAA,EAAI,SAAS,CAAC,MAAM,CAAC,S,GAC7D,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,UAEzC,GAEA,IAAM,EAAmB,SAAC,CAAA,CAAS,CAAnC,EACE,IAAM,EAAe,SAAS,aAAa,CAAC,MAE5C,CAAA,EAAa,SAAS,CAAG,gBAAqB,MAAA,CAAL,GACzC,EAAa,SAAS,CAAG,EACzB,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,WAAW,WACT,EAAa,MAAM,EACrB,EAAG,IACL,EAEM,EAAW,SAAjB,CAAA,EAAoB,IAAA,EAAA,EAAA,OAAA,CAAS,EAAA,EAAA,WAAA,CAAa,EAAA,EAAA,SAAA,CAAW,EAAA,EAAA,MAAA,CAAQ,EAAA,EAAA,SAAzC,CACZ,EAAS,EAAM,SAAS,GAE9B,CAAC,EAAS,EAAa,EAAW,EAAQ,EAAU,CAAC,OAAO,CAAC,SAAC,CAAV,EAGlD,AAFgB,EAAO,UAAU,GAEzB,SAAS,CAAG,CACtB,EACF,EAEA,EAAK,gBAAgB,CAAC,SAAU,SAAC,CAAjC,EACE,EAAI,cAAc,GAElB,IAAM,EAAU,EAAK,aAAa,CAAC,iBAAiB,KAAK,CAAC,IAAI,GACxD,EAAc,EAAK,aAAa,CAAC,qBAAqB,KAAK,CAAC,IAAI,GAChE,EAAY,EAAK,aAAa,CAAC,mBAAmB,KAAK,CAAC,IAAI,GAC5D,EAAQ,SAAS,EAAK,aAAa,CAAC,gBAAgB,KAAK,CAAC,IAAI,GAAI,IAClE,EAAY,SAChB,EAAK,aAAa,CAAC,mBAAmB,KAAK,CAAC,IAAI,GAChD,IAGF,GACE,CAAC,GACD,CAAC,GACD,CAAC,GACD,MAAM,IACN,MAAM,GACN,CACA,EAAiB,6CAA8C,SAE/D,MACF,CAEA,GAAI,EAAQ,MAAM,CAAG,EAAG,CACtB,EAAiB,2CAA4C,SAE7D,MACF,CAEA,GAAI,EAAQ,IAAM,EAAQ,GAAI,CAC5B,EAAiB,iCAAkC,SAEnD,MACF,CAEA,EAAS,CACP,QAAA,EACA,YAAA,EACA,UAAA,EACA,MAAA,EACA,UAAA,CACF,GACA,EAAK,KAAK,GACV,EAAiB,+BAAgC,UACnD,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var table = document.querySelector(\"table\");\n    var tbody = table.querySelector(\"tbody\");\n    var form = document.querySelector(\".new-employee-form\");\n    var isAscending = true;\n    var sortTable = function(index, asc) {\n        var _tbody;\n        var rows = Array.from(tbody.rows);\n        rows.sort(function(a, b) {\n            var cellA = a.cells[index].innerText;\n            var cellB = b.cells[index].innerText;\n            if (cellA < cellB) return asc ? -1 : 1;\n            if (cellA > cellB) return asc ? 1 : -1;\n            return 0;\n        });\n        (_tbody = tbody).append.apply(_tbody, _to_consumable_array(rows));\n    };\n    table.querySelectorAll(\"th\").forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            sortTable(index, isAscending);\n            isAscending = !isAscending;\n        });\n    });\n    tbody.addEventListener(\"click\", function(e) {\n        if (e.target.tagName === \"TD\") {\n            Array.from(tbody.rows).forEach(function(row) {\n                return row.classList.remove(\"active\");\n            });\n            e.target.parentElement.classList.add(\"active\");\n        }\n    });\n    var showNotification = function(message, type) {\n        var notification = document.createElement(\"div\");\n        notification.className = \"notification \".concat(type);\n        notification.innerText = message;\n        document.body.appendChild(notification);\n        setTimeout(function() {\n            notification.remove();\n        }, 2000);\n    };\n    var addEmplo = function(param) {\n        var empName = param.empName, empPosition = param.empPosition, empOffice = param.empOffice, empAge = param.empAge, empSalary = param.empSalary;\n        var newRow = tbody.insertRow();\n        [\n            empName,\n            empPosition,\n            empOffice,\n            empAge,\n            empSalary\n        ].forEach(function(text) {\n            var newCell = newRow.insertCell();\n            newCell.innerText = text;\n        });\n    };\n    form.addEventListener(\"submit\", function(evt) {\n        evt.preventDefault();\n        var empName = form.querySelector('[name=\"name\"]').value.trim();\n        var empPosition = form.querySelector('[name=\"position\"]').value.trim();\n        var empOffice = form.querySelector('[name=\"office\"]').value.trim();\n        var empAg = parseInt(form.querySelector('[name=\"age\"]').value.trim(), 10);\n        var empSalary = parseInt(form.querySelector('[name=\"salary\"]').value.trim(), 10);\n        if (!empName || !empPosition || !empOffice || isNaN(empAg) || isNaN(empSalary)) {\n            showNotification(\"All fields are required and must be valid.\", \"error\");\n            return;\n        }\n        if (empName.length < 4) {\n            showNotification(\"Name must be at least 4 characters long.\", \"error\");\n            return;\n        }\n        if (empAg < 18 || empAg > 90) {\n            showNotification(\"Age must be between 18 and 90.\", \"error\");\n            return;\n        }\n        addEmplo({\n            empName: empName,\n            empPosition: empPosition,\n            empOffice: empOffice,\n            empAg: empAg,\n            empSalary: empSalary\n        });\n        form.reset();\n        showNotification(\"Employee added successfully.\", \"success\");\n    });\n});\n\n//# sourceMappingURL=index.6967ada1.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const table = document.querySelector('table');\n  const tbody = table.querySelector('tbody');\n  const form = document.querySelector('.new-employee-form');\n  let isAscending = true;\n\n  const sortTable = (index, asc) => {\n    const rows = Array.from(tbody.rows);\n\n    rows.sort((a, b) => {\n      const cellA = a.cells[index].innerText;\n      const cellB = b.cells[index].innerText;\n\n      if (cellA < cellB) {\n        return asc ? -1 : 1;\n      }\n\n      if (cellA > cellB) {\n        return asc ? 1 : -1;\n      }\n\n      return 0;\n    });\n\n    tbody.append(...rows);\n  };\n\n  table.querySelectorAll('th').forEach((header, index) => {\n    header.addEventListener('click', () => {\n      sortTable(index, isAscending);\n      isAscending = !isAscending;\n    });\n  });\n\n  tbody.addEventListener('click', (e) => {\n    if (e.target.tagName === 'TD') {\n      Array.from(tbody.rows).forEach((row) => row.classList.remove('active'));\n      e.target.parentElement.classList.add('active');\n    }\n  });\n\n  const showNotification = (message, type) => {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.innerText = message;\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.remove();\n    }, 2000);\n  };\n\n  const addEmplo = ({ empName, empPosition, empOffice, empAge, empSalary }) => {\n    const newRow = tbody.insertRow();\n\n    [empName, empPosition, empOffice, empAge, empSalary].forEach((text) => {\n      const newCell = newRow.insertCell();\n\n      newCell.innerText = text;\n    });\n  };\n\n  form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n\n    const empName = form.querySelector('[name=\"name\"]').value.trim();\n    const empPosition = form.querySelector('[name=\"position\"]').value.trim();\n    const empOffice = form.querySelector('[name=\"office\"]').value.trim();\n    const empAg = parseInt(form.querySelector('[name=\"age\"]').value.trim(), 10);\n    const empSalary = parseInt(\n      form.querySelector('[name=\"salary\"]').value.trim(),\n      10,\n    );\n\n    if (\n      !empName ||\n      !empPosition ||\n      !empOffice ||\n      isNaN(empAg) ||\n      isNaN(empSalary)\n    ) {\n      showNotification('All fields are required and must be valid.', 'error');\n\n      return;\n    }\n\n    if (empName.length < 4) {\n      showNotification('Name must be at least 4 characters long.', 'error');\n\n      return;\n    }\n\n    if (empAg < 18 || empAg > 90) {\n      showNotification('Age must be between 18 and 90.', 'error');\n\n      return;\n    }\n\n    addEmplo({\n      empName,\n      empPosition,\n      empOffice,\n      empAg,\n      empSalary,\n    });\n    form.reset();\n    showNotification('Employee added successfully.', 'success');\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","addEventListener","table","querySelector","tbody","form","isAscending","sortTable","index","asc","rows","from","sort","a","b","cellA","cells","innerText","cellB","append","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","querySelectorAll","forEach","header","e","target","tagName","row","classList","remove","parentElement","add","showNotification","message","type","notification","createElement","className","concat","body","appendChild","setTimeout","addEmplo","param","empName","empPosition","empOffice","empAge","empSalary","newRow","insertRow","text","newCell","insertCell","evt","preventDefault","value","trim","empAg","parseInt","isNaN","reset"],"version":3,"file":"index.6967ada1.js.map"}